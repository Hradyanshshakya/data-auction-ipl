# -*- coding: utf-8 -*-
"""python project IPL Auction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVnf9eJeVHHhXchZP9O9Azlo7OneQ1i9

**Python Project on IPL Auction**

**Problem Statement :** We have to consolidated the date for each of the player sold in IPL 2023 auction and that of the retained players from each franchise.**The data Contain information like** matches played, runs, wickets, strike rate, catches, runouts, stumps etc.

**Based on these data Points**We will try to create the best 11 from these set of players from the current campaign.
We can summarize our analysis in the following steps:

1) Extraction and loading the data.

2) Cleaning the data and removing the noise.

3) Analyze the data on different parameters.

4) visualizing the important statistical findings.

5) Making the best team of 11 based on the performance on previous IPL tournament. i.e. how many batters, bowlers, and allrounders should be included in the team.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Loading the Data**


"""

data = pd.read_csv("IPLDataSet.csv")

#first look at the data , head() return the first 5 rows of the dataset.
data.head()

#describe function will return the necessary information like count, mean, std deviation, etc for the entire dataset
data.describe()

#check the number of null values using the isna().sum() method.
data.isna().sum()

#The info method will retun the information about the dataset like the null objects, and the data types of each of the elements in the dataSet.
data.info()

"""**Cleaning the Data**

In our project, The players can be initially segragated based on following parameters
1) Capped : Batters,Bowlers,Allrounders,WicketKeeper
2) UnCapped :Batters, Bowlers, Allrounders, Wicketkeepers

The Uncapped players are playing the IPL for the fist time, or relevant data isn't available so we have used thier domestic T20 performance.
"""

#segregating - Data
#We have kept the batting parameters to restrict the anaysis for batter specific tendencies.
batters = data.loc[(data["Player_Type"] ==  "Batter")]
batters_new = batters.loc[(batters["Capped"] ==1)]

Capped_Batters = batters_new[['Player Name','Team','Nationality','Matches_Played','Runs','Average','Strike_Rate']]

#The segregation of the batters based on the capped data gives us the batters that have a history of playing IPL matches.
Capped_Batters.head()

#segregating Data - Capped Bowlers
#We have kept the Bowling parameters, since we will purely judge the bowlers on their bowling statistics.
bowlers = data.loc[(data["Player_Type"] ==  "Bowler ")]
bowlers_new = bowlers.loc[(bowlers["Capped"] ==1)]

Capped_Bowlers = bowlers_new[['Player Name','Team','Nationality','Matches_Played','Wickets','Bowling_average','Economy','Bowling_Strike_Rate']]

#capped bowlers contain the bowlers data has already played IPL matches before the 2023 campaign
Capped_Bowlers.head()

#segregating data- Capped Keepers
#We are keeping the relevant partameters for the keepers, since bowling figures are not needed for the wicket-keepers

Keepers = data.loc[(data["Player_Type"] == "Keeper")]
Keepers_new = Keepers.loc[(Keepers["Capped"] == 1)]

Capped_Keepers = Keepers_new[['Player Name','Team','Nationality','Matches_Played','Runs','Average','Strike_Rate','Catches','Run_outs','Stumps']]

#the capped keeeper data consists of keepers that have a history of playing IPL matches
Capped_Keepers.head()

#segregated Data - Capped Allrounders
#we have kept the bowling and batting parameters for the allrounders to analyze all round performance
Allrounders = data.loc[(data["Player_Type"]=="Allrounder")]
Allrounders_new = Allrounders.loc[(Allrounders["Capped"] == 1)]
Capped_Allrounders = Allrounders_new[['Player Name','Team','Nationality','Matches_Played','Runs','Average','Strike_Rate','Wickets','Bowling_average','Economy','Bowling_Strike_Rate']]

#The Capped Allrounders data consist of the allrounders who have already played the IPL matches before 2023
Capped_Allrounders.head()

#Cleaning the data by making the null and NAN values 0

Capped_Batters = Capped_Batters.fillna(0)
Capped_Bowlers = Capped_Bowlers.fillna(0)
Capped_Allrounders = Capped_Allrounders.fillna(0)
Capped_Keepers = Capped_Keepers.fillna(0)

#Checking the null values in the data

print((Capped_Batters.isna().sum()))
print((Capped_Bowlers.isna().sum()))
print((Capped_Keepers.isna().sum()))
print((Capped_Allrounders.isna().sum()))

"""**Initial Analysis**

We will analyze data for batters, bowlers, keepers and allrounders.
"""

#Analyzing the Batters Data
#Here we have narrowed our analysis to batters who have a batting average more than 32.0
top_batters = Capped_Batters.loc[(Capped_Batters["Average"] >= 32.0)]

#Sorting the data in descending order - with respect to each parameter
top_batters_average = top_batters.sort_values('Average', ascending = False)
top_batters_strike_rate = top_batters.sort_values('Strike_Rate', ascending = False)
top_batters_runs = top_batters.sort_values('Runs', ascending = False)
top_batters_matches = top_batters.sort_values('Matches_Played', ascending = False)

#the data of each of the batters in descending order of batting averages.
top_batters_average

#the batters data in the descending order of strike rate
top_batters_strike_rate

#the batters matches palyed data in descending order
top_batters_matches

#the batters runs data in descending order
top_batters_Runs

"""From our analysis, if we rank from 0-10, the top three batters that will come while analysis each of the above data are:

1) David Warner

2) KL Rahul

3) Virat Kolhi
"""

#Analyzing the Bowling Data
#here we have narowed our analysis based on the bowling average ot the players to be less the 24.0
top_bowlers = Capped_Bowlers.loc[(Capped_Bowlers['Bowling_average'] <= 24.0)]

top_bowlers_average = top_bowlers.sort_values('Bowling_average')
top_bowlers_strike_rate = top_bowlers.sort_values('Bowling_Strike_Rate')
top_bowlers_wickets = top_bowlers.sort_values('Wickets', ascending = False)
top_bowlers_economy = top_bowlers.sort_values('Economy')
top_bowlers_matches = top_bowlers.sort_values('Matches_Played', ascending = False)

#the dataframe contain the top bowling average in acending order
top_bowlers_average

#the dataframe contain the top economy in acending order
top_bowlers_economy

#the dataframe contain the top strike rate in acending order
top_bowlers_strike_rate

#the dataframe contain the top wickets in acending order
top_bowlers_wickets

#the dataframe contain the matches played by bowler in descending order
top_bowlers_matches

"""From the above analysis. If we rank down the parameter from 1-10 The top bowling options are as follows

1) kagiso Rabada

2) Jasprit Bumrah

3) Yuzvendra Chahal

4) Nathan Coulter-Nile
"""

#Analysis the Allrounder Data
#We have narrowed our analysis by further segregating the allrounders based on strike rate equal to or more than 140.0
top_allrounders = Capped_Allrounders.loc[(Capped_Allrounders["Strike_Rate"] >= 140.0)]

top_allrounders_average = top_allrounders.sort_values('Average', ascending = False)
top_allrounders_strike_rate = top_allrounders.sort_values('Strike_Rate', ascending = False)
top_allrounders_runs = top_allrounders.sort_values('Runs', ascending = False)
top_allrounders_matches = top_allrounders.sort_values('Matches_Played',ascending = False)
top_allrounders_bowling_average = top_allrounders.sort_values('Bowling_average')
top_allrounders_bowling_strike_rate = top_allrounders.sort_values('Bowling_Strike_Rate')
top_allrounders_wickets = top_allrounders.sort_values('Wickets', ascending = False)
top_allrounder_economy = top_allrounders.sort_values('Economy')
top_allrounders_matches = top_allrounders.sort_values('Matches_Played', ascending = False)

#The dataframe consists of players average in descending order for the top allrounders
top_allrounders_average

#The data conatains the strike rate in descending order for top allrounders.
top_allrounders_strike_rate

#The data consists of runs of top allrounders in descending order
top_allrounders_runs

#The data consists of the matches information for top allroundrs in descending order.
top_allrounders_matches

#The data consists of all the top allrounder's bowling average in ascending order.
top_allrounders_bowling_average

#The data contains the bowling strike rate info in ascending order for top allrounders.
top_allrounders_bowling_strike_rate

#The dataframes consists of the information about wickets of top allrounders in descending order.
top_allrounders_wickets

#The dataframes consists of the economy of the top allrounders in ascending order
top_allrounder_economy

"""From the analysis, if we rank down the allrounders form 1-10 on various parameters. The top allrounder options are as follows:

1) Andre Russell

2) Sunil Narine

3) Hardik Pandya

4) Jofra Archer
"""

#Analyzing the keepers Data
#We have to narrowed our analysis down to keepers averaging more than 25.0
top_Keepers = Capped_Keepers.loc[(Capped_Keepers["Average"]>=25.0)]

top_Keepers_average = top_Keepers.sort_values('Average', ascending = False)
#top_Keepers_strike_rate = top_Keepers.sort_values('strike_rate', ascending = False)
top_Keepers_runs = top_Keepers.sort_values('Runs',ascending=False)
top_Keepers_matches = top_Keepers.sort_values('Matches_Played', ascending = False)
top_Keepers_catches = top_Keepers.sort_values('Catches', ascending = False)
top_Keepers_runouts = top_Keepers.sort_values('Run_outs',ascending = False)
top_Keepers_stumps = top_Keepers.sort_values('Stumps', ascending = False)

#The dataframe consist of the averages of the top keepers in descending order
top_Keepers_average

#the dataframe consists of the top keeper's runs in descending order.
top_Keepers_runs

#The dataframe consist of the matches played by top keepers in descending order.
top_Keepers_matches

#the dataframe consists of the top keeper's catches data in descending order.
top_Keepers_catches

#the dataframes consists of the runout data for keepers in descending oerder.
top_Keepers_runouts

#the dataframe consist of the top keepers stumps data in descending order.
top_Keepers_stumps

"""If we rank the Keepers in order of 1-10 on the above parameters. The top 3 keepers will be

1) MS Dhoni

2) Dinesh Karthik

3) Rishabh Pant

**Visualization For Enhanced Analysis**

For the Better analysis of th data, we can create its visual representations
"""

#visualization of Batters Data
#the plot show each of the top batters strike rate.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Strike_Rate', data=top_batters)

#visualization of Batters Data
#the plot show each of the top batters runs.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_batters)

#visualization of Batters Data
#the plot show each of the top batters Average.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_batters)

#visualization of Batters Data
#the plot show each of the top batters matches.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_batters)

#visualization of Bowlers Data
#the plot show each of the bowling average of each of the top bowlers.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_average', data=top_bowlers)

#visualization of Bowlers Data
#the plot show each of the Economy of each of the top bowlers.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Economy', data=top_bowlers)

#visualization of Bowlers Data
#the plot show each of the bowling strike rate of each of the top bowlers.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_Strike_Rate', data=top_bowlers)

#visualization of Bowlers Data
#the plot show each of the Matches Played of each of the top bowlers.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_bowlers)

#visualization of allrounder Data
#the plot show each of the average of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_allrounders)

#visualization of allrounder Data
#the plot show each of the strike_rate of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_Strike_Rate', data=top_allrounders)

#visualization of allrounder Data
#the plot show each of the runs of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_allrounders)

#visualization of keepers Data
#the plot show each of the average of each of the top Keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_Keepers)

#visualization of keepers Data
#the plot show each of the stumps of each of the top Keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Stumps', data=top_Keepers)

#visualization of keepers Data
#the plot show each of the Catches of each of the top Keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Catches', data=top_Keepers)

#visualization of keepers Data
#the plot show each of the runs of each of the top Keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_Keepers)

#visualization of keepers Data
#the plot show each of the Runouts of each of the top Keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_Keepers)

"""**Forming the Best 11 for the Campaign based on the analysis of data**

For the final analysis we will consider the ratio of players in the best 11 as follows:

1) Batter - 3

2) Allrounder - 3

3) Bowlers - 4 (pacers - 2 and spinners - 2)

4) Wicket Keeper - 1

**Final 11 For the IPL Campaign**
"""

batter1 = top_batters.loc[(top_batters["Player Name"] == 'KL Rahul ')]
batter2 = top_batters.loc[(top_batters["Player Name"] == 'David Warner ')]
batter3 = top_batters.loc[(top_batters["Player Name"] == 'Virat Kohli')]

bowler1 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Yuzvendra Chahal ')]
bowler2 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Jasprit Bumrah')]
bowler3 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Nathan Coulter-Nile')]
bowler4 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Kagiso Rabada ')]

allrounder1 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Andre Russell')]
allrounder2 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Sunil Narine ')]
allrounder3 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Hardik Pandya')]

keeper = top_Keepers.loc[(top_Keepers["Player Name"] == 'MS Dhoni')]

final = [batter1, batter2, batter3, allrounder1, allrounder2, allrounder3, keeper, bowler1, bowler2, bowler3, bowler4]
final_team = pd.concat(final)
final_team = final_team.drop(labels = ['Matches_Played','Runs','Average','Strike_Rate','Wickets','Bowling_average','Economy','Bowling_Strike_Rate','Catches','Run_outs','Stumps'],axis = 1)
final_team.reset_index(drop = True)

